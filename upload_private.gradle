import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

// 插件本地调试补充
apply plugin: 'maven-publish'

Properties properties = new Properties()
properties.load(project.file('gradle.properties').newDataInputStream())
print("upload private config")
task packageSourcesJar(type: Jar) {
    classifier 'sources'
    if (project.name == "privacy-annotation" || project.name == "plugin-sentry"){
        from project.sourceSets.main.java.getSrcDirs()
    }
    else{
        from project.android.sourceSets.main.java.getSrcDirs()
    }

}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // You can then customize attributes of the publication as shown below.

                def artifactName = properties.getOrDefault('archivesBaseName', "")
                def mGroupId = properties.getOrDefault('group', "")
                def mVersion = properties.getOrDefault('version', "")

                groupId = mGroupId
                version = mVersion


                artifactId = artifactName
                artifact packageSourcesJar
                // Two artifacts, the `aar` and the sources
                if (artifactName == "privacy-plugin" || artifactName == "privacy-annotation") {
                    artifact("$buildDir/libs/${project.getName()}-${version}.jar")
                } else {
                    artifact("$buildDir/outputs/aar/${artifactName}-release.aar")
                }

                // Self-explanatory metadata for the most part
                pom {
                    name = artifactName
                    description = 'privacy plugin , local test'
                    // A slightly hacky fix so that your POM will include any transitive dependencies
                    // that your library builds upon
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        project.configurations.implementation.allDependencies.each { dependency ->
                            if (!dependency.name.isEmpty() && dependency.name != "unspecified") {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                if (dependency instanceof DefaultProjectDependency) {
                                    //统一project 前缀
                                    if (dependency.name.startsWith("privacy")) {
                                        dependencyNode.appendNode('groupId', mGroupId)
                                        dependencyNode.appendNode('artifactId', artifactName)
                                        dependencyNode.appendNode('version', mVersion)
                                    }
                                } else {
                                    dependencyNode.appendNode('groupId', dependency.group)
                                    dependencyNode.appendNode('artifactId', dependency.name)
                                    dependencyNode.appendNode('version', dependency.version)
                                }
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "mavenCentral"
                url = uri(rootProject.ext.LOCAL_REPOSITORY_URL)
            }
        }
    }
}